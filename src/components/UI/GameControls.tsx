import React, { useEffect } from 'react';
import { useGameStore } from '../../store/gameStore';
import { TowerType } from '../../types/game.types';
import type { City } from '../../types/game.types';
import { CityCapture } from './CityCapture';
import { getRealCities } from '../../services/geoNamesService';
import './GameControls.css';

const TOWER_INFO = {
  [TowerType.BASIC]: { name: '–ë–∞–∑–æ–≤–∞—è', cost: 100, icon: 'üî´', color: '#4A90E2' },
  [TowerType.SNIPER]: { name: '–°–Ω–∞–π–ø–µ—Ä', cost: 250, icon: 'üéØ', color: '#7B68EE' },
  [TowerType.SPLASH]: { name: '–í–∑—Ä—ã–≤–Ω–∞—è', cost: 400, icon: 'üí•', color: '#FF6B6B' },
  [TowerType.SLOW]: { name: '–ó–∞–º–µ–¥–ª—è—é—â–∞—è', cost: 150, icon: '‚ùÑÔ∏è', color: '#4ECDC4' }
};

export const GameControls: React.FC = () => {
  const { 
    player,
    currentWave,
    gameSpeed,
    isPaused,
    placingTowerType,
    enemies,
    enemyBases,
    towers,
    capturedCitiesData,
    setPlacingTowerType,
    setAvailableCitiesForTowers,
    setShowAvailableCitiesForTowers,
    showAvailableCitiesForTowers,
    togglePause,
    setGameSpeed,
    getTowerLimit,
    getCurrentTowerCount
  } = useGameStore();

  const resources = player?.resources || { gold: 0, energy: 0, score: 0 };
  const cityHealth = player?.startCity?.health || 100;
  const cityMaxHealth = player?.startCity?.maxHealth || 100;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –±–∞—à–µ–Ω –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ –±–∞—à–Ω–∏
  useEffect(() => {
    if (placingTowerType && player?.startCity) {
      const MAX_TOWER_DISTANCE = 500; // –∫–º
      
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞—à–∏ –≥–æ—Ä–æ–¥–∞
      const ourCities = [
        player.startCity,
        ...capturedCitiesData
      ];
      
      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ API
      const loadRealCities = async () => {
        const availableCities: City[] = [];
        const cityIds = new Set<string>();
        
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –≤ —Ä–∞–¥–∏—É—Å–µ
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 15 –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞
        for (const ourCity of ourCities) {
          try {
            const realCities = await getRealCities(ourCity.position, MAX_TOWER_DISTANCE, 15);
            
            for (const city of realCities) {
              if (!cityIds.has(city.id)) {
                cityIds.add(city.id);
                availableCities.push(city);
              }
            }
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤:', error);
          }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–∏ –≥–æ—Ä–æ–¥–∞ —Ç–æ–∂–µ
        for (const ourCity of ourCities) {
          if (!cityIds.has(ourCity.id)) {
            cityIds.add(ourCity.id);
            availableCities.push(ourCity);
          }
        }
        
        setAvailableCitiesForTowers(availableCities);
        setShowAvailableCitiesForTowers(true);
      };
      
      loadRealCities();
    } else {
      setShowAvailableCitiesForTowers(false);
    }
  }, [placingTowerType, player, capturedCitiesData, setAvailableCitiesForTowers, setShowAvailableCitiesForTowers]);

  return (
    <div className="game-controls">
      {/* –ó–¥–æ—Ä–æ–≤—å–µ –≥–æ—Ä–æ–¥–∞ */}
      <div className="city-health-panel">
        <h3>üèôÔ∏è –ó–¥–æ—Ä–æ–≤—å–µ –≥–æ—Ä–æ–¥–∞</h3>
        <div className="health-bar">
          <div 
            className="health-fill" 
            style={{ 
              width: `${(cityHealth / cityMaxHealth) * 100}%`,
              backgroundColor: cityHealth > 50 ? '#4CAF50' : cityHealth > 25 ? '#FFA500' : '#FF0000'
            }}
          />
          <span className="health-text">{cityHealth} / {cityMaxHealth}</span>
        </div>
      </div>

      {/* –†–µ—Å—É—Ä—Å—ã */}
      <div className="resources-panel">
        <div className="resource">
          <span className="resource-icon">üí∞</span>
          <span className="resource-value">{resources.gold}</span>
        </div>
        <div className="resource">
          <span className="resource-icon">‚ö°</span>
          <span className="resource-value">{resources.energy}</span>
        </div>
        <div className="resource">
          <span className="resource-icon">üèÜ</span>
          <span className="resource-value">{resources.score}</span>
        </div>
        <div className="resource">
          <span className="resource-icon">üåä</span>
          <span className="resource-value">–í–æ–ª–Ω–∞ {currentWave}</span>
        </div>
        <div className="resource" style={{ backgroundColor: enemies.length > 150 ? '#FFDDDD' : 'transparent' }}>
          <span className="resource-icon">üëæ</span>
          <span className="resource-value" style={{ color: enemies.length > 150 ? '#FF0000' : 'inherit' }}>
            {enemies.length}
          </span>
        </div>
        <div className="resource">
          <span className="resource-icon">üè¥</span>
          <span className="resource-value">
            {enemyBases.filter(b => b.isActive).length}
          </span>
        </div>
      </div>

      {/* –ë–∞—à–Ω–∏ */}
      <div className="towers-panel">
        <h3>–ë–∞—à–Ω–∏ ({getCurrentTowerCount()}/{getTowerLimit()})</h3>
        {getCurrentTowerCount() >= getTowerLimit() && (
          <div className="tower-limit-warning">
            ‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–∞—à–µ–Ω! –ó–∞—Ö–≤–∞—Ç–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥.
          </div>
        )}
        <div className="tower-buttons">
          {Object.entries(TOWER_INFO).map(([type, info]) => (
            <button
              key={type}
              className={`tower-button ${placingTowerType === type ? 'active' : ''} ${
                resources.gold < info.cost ? 'disabled' : ''
              }`}
              onClick={() => setPlacingTowerType(
                placingTowerType === type ? undefined : type as TowerType
              )}
              disabled={resources.gold < info.cost}
              style={{ borderColor: info.color }}
            >
              <span className="tower-icon">{info.icon}</span>
              <span className="tower-name">{info.name}</span>
              <span className="tower-cost">{info.cost} üí∞</span>
            </button>
          ))}
        </div>
        {placingTowerType && (
          <div className="placement-hint">
            üéØ –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–∞—à–Ω–∏
            <br/>
            <small>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–¥—Å–≤–µ—á–µ–Ω—ã —Å–∏–Ω–∏–º —Ü–≤–µ—Ç–æ–º</small>
          </div>
        )}
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π */}
      <div className="game-speed-controls">
        <button 
          className={`control-button ${isPaused ? 'paused' : ''}`}
          onClick={togglePause}
        >
          {isPaused ? '‚ñ∂Ô∏è' : '‚è∏Ô∏è'}
        </button>
        
        <div className="speed-buttons">
          <button 
            className={`speed-button ${gameSpeed === 1 ? 'active' : ''}`}
            onClick={() => setGameSpeed(1)}
          >
            1x
          </button>
          <button 
            className={`speed-button ${gameSpeed === 5 ? 'active' : ''}`}
            onClick={() => setGameSpeed(5)}
          >
            5x
          </button>
          <button 
            className={`speed-button ${gameSpeed === 10 ? 'active' : ''}`}
            onClick={() => setGameSpeed(10)}
          >
            10x
          </button>
        </div>
      </div>

      {/* –ó–∞—Ö–≤–∞—Ç –≥–æ—Ä–æ–¥–æ–≤ */}
      <CityCapture />
    </div>
  );
};