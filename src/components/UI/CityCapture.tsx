import React, { useState, useEffect } from 'react';
import { useGameStore } from '../../store/gameStore';
import { getRealCities } from '../../services/geoNamesService';
import { calculateDistance } from '../../data/worldCities';
import type { City } from '../../types/game.types';
import './CityCapture.css';

const CITY_CAPTURE_COST = 500;
const MAX_CAPTURE_DISTANCE = 500; // –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–¥–∏—É—Å –¥–æ 500–∫–º

export const CityCapture: React.FC = () => {
  const { 
    player, 
    getTowerLimit,
    getCurrentTowerCount,
    setAvailableCitiesForCapture,
    setShowAvailableCities,
    showAvailableCities
  } = useGameStore();
  
  const [availableCities, setAvailableCities] = useState<City[]>([]);
  
  useEffect(() => {
    if (player?.startCity) {
      // –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π (—Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥ + –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ)
      const excludeIds = [player.startCity.id, ...player.capturedCities];
      
      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
      const loadCities = async () => {
        try {
          const realCities = await getRealCities(player.startCity.position, MAX_CAPTURE_DISTANCE);
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞: –∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–∏–µ
          const available = realCities.filter(city => {
            if (excludeIds.includes(city.id)) return false;
            const distance = calculateDistance(player.startCity!.position, city.position);
            return distance >= 30 && distance <= MAX_CAPTURE_DISTANCE; // –ú–∏–Ω–∏–º—É–º 30–∫–º
          });
          
          setAvailableCities(available);
          setAvailableCitiesForCapture(available);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤:', error);
          setAvailableCities([]);
          setAvailableCitiesForCapture([]);
        }
      };
      
      loadCities();
    }
  }, [player, setAvailableCitiesForCapture]);
  
  const toggleCityView = () => {
    setShowAvailableCities(!showAvailableCities);
  };
  
  const currentTowers = getCurrentTowerCount();
  const towerLimit = getTowerLimit();
  const needMoreTowers = currentTowers >= towerLimit - 2; // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å 2 —Å–ª–æ—Ç–∞
  
  return (
    <div className="city-capture-panel">
      <div className="city-capture-header">
        <h3>üè∞ –ó–∞—Ö–≤–∞—Ç –≥–æ—Ä–æ–¥–æ–≤</h3>
        <div className="capture-info">
          <span>–ë–∞—à–Ω–∏: {currentTowers}/{towerLimit}</span>
          <span>–ì–æ—Ä–æ–¥–æ–≤: {player?.capturedCities.length || 1}</span>
        </div>
      </div>
      
      {needMoreTowers && (
        <div className="capture-hint">
          üí° –°–∫–æ—Ä–æ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç–µ –ª–∏–º–∏—Ç–∞ –±–∞—à–µ–Ω! –ó–∞—Ö–≤–∞—Ç–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥.
        </div>
      )}
      
      <button
        className={`capture-button ${showAvailableCities ? 'active' : ''}`}
        onClick={toggleCityView}
        disabled={!player?.resources || player.resources.gold < CITY_CAPTURE_COST}
      >
        <span className="capture-icon">üè∞</span>
        <span className="capture-text">
          {showAvailableCities ? '–°–∫—Ä—ã—Ç—å –≥–æ—Ä–æ–¥–∞' : '–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç–µ'}
        </span>
        <span className="capture-cost">{CITY_CAPTURE_COST} üí∞</span>
      </button>
      
      {showAvailableCities && (
        <div className="city-hint">
          üëÜ –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∑–µ–ª—ë–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–∞ –∫–∞—Ä—Ç–µ —á—Ç–æ–±—ã –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –µ–≥–æ
          <br/>
          <small>–î–æ—Å—Ç—É–ø–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {availableCities.length}</small>
        </div>
      )}
    </div>
  );
};